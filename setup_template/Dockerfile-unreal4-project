
# A random source for cache breaking
ARG	CACHEBREAKER=https://www.random.org/cgi-bin/randbyte?nbytes=10&format=h

# Vars needed for the commandlet and build calls below.
# https://stackoverflow.com/questions/44438637/arg-substitution-in-run-command-not-working-for-dockerfile
ARG	OUTPUT_DIR=/tmp/generated

# Built from https://github.com/PixoVR/docs-docker-ue4-base
FROM	gcr.io/pixo-bootstrap/docs-docker-ue4-base:latest as ue4

# because of FROM, we have to re-mention our vars
ARG	CACHEBREAKER
ARG	OUTPUT_DIR

WORKDIR /project

# sup cachebreaker
ADD	$CACHEBREAKER skipcache24

# startup stats
#RUN	free -h
#RUN	df -h

# copy/move the documentation plugin to a temp location
RUN	cd /project/project/Plugins/pixo-unreal-documentation && \
	git pull origin main && \
	cp -rf /project/project/Plugins/pixo-unreal-documentation /tmp/pixo-unreal-documentation

# Copy this project into the `/project` folder.
COPY	--chown=ue4:ue4 . /project

# move the documentation plugin back, unless it's already in the project
RUN	if [ -d "/project/Plugins/pixo-unreal-documentation" ] ; then \
		echo "Keeping existing pixo-unreal-documentation plugin..." && \
		rm -rf /tmp/pixo-unreal-documentation; \
	else \
		cp -rf /tmp/pixo-unreal-documentation /project/Plugins/pixo-unreal-documentation && \
		rm -rf /tmp/pixo-unreal-documentation; \
	fi

# Make sure our submodules are up to date (and that our git auth is working)
# This is for updating pixo-unreal-documentation to latest on main
RUN	cd /project && \
	git submodule update --init --recursive && \
	git lfs pull

# Ensure that our output directory exists.
RUN	mkdir -p ${OUTPUT_DIR}

# Build any un-compiled plugins, which will probably be all of them.
# This builds the plugin(s) contained in this repo/project as well as the pixo-unreal-documentation plugin.
run	eval "$(cat /project/documentation/env.sh | grep UNREAL_PROJECT)" && \
	RunUAT.sh BuildEditor \
	-project=$UNREAL_PROJECT \
	-notools

# stats
#RUN	df -h
#RUN	free -h

# Generate the plugin cpp files from the commandlet.
# https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/CommandLineArguments/
RUN	eval "$(cat /project/documentation/env.sh | grep UNREAL_UFS_PATHS)" && \
	eval "$(cat /project/documentation/env.sh | grep UNREAL_PROJECT)" && \
	export LD_LIBRARY_PATH=$UE_DIR/Engine/Binaries/Linux/Android && \
	( \
	  UE4Editor-Cmd $UNREAL_PROJECT \
	  -nullrhi \
	  -nosplash \
	  -unattended \
	  -nosound \
	  -auto \
	  -useallavailablecores \
	  -LogCmds="global Warning, LOG_DOT all" \
	  -NoLogTimes \
	  -run=PixoDocumentation \
	  -OutputMode=doxygen \
	  -OutputDir=$OUTPUT_DIR \
	  -Include=$UNREAL_UFS_PATHS \
	|| \
	  echo "Exiting with warnings, but will parse what we have." \
	)
	  

# check to see it all got there
#RUN	ls -al $OUTPUT_DIR

# stats
#RUN	df -h
#RUN	free -h

# built from https://github.com/PixoVR/docs-docker-base
FROM	gcr.io/pixo-bootstrap/docs-docker-base:latest as builder

# because of FROM, we have to re-mention our vars
ARG	CACHEBREAKER
ARG	OUTPUT_DIR

WORKDIR	/build

# get this plugin into the /build folder for doxygen
# the copy above will have Intermediate and Build folders from the compile,
# and we don't want to deal with ignoring them for documentation.
COPY	. .

# grab the documentation (fake C++ files) we generated above
COPY	--from=ue4 $OUTPUT_DIR documentation/generated

# check to see it all got there
#RUN	ls -al /build/documentation

# stats
RUN	df -h
RUN	free -h
#RUN	doxygen -v	# confirm doxygen version from docs-docker-base

# ensure the doxygen stuff is most up to date
RUN	git submodule set-branch --branch main documentation/docs-doxygen && \
	cd documentation/docs-doxygen && git pull origin main && cd ../../ && \
	git submodule update --init documentation/docs-doxygen && \
	git submodule update --init --recursive && \
	git tag

# sup cachebreaker
#ADD	$CACHEBREAKER skipcache22

# actually do the doxygen build, and move the output to our nginx (sub)folder
RUN	./documentation/build.sh && \
	eval "$(cat ./documentation/env.sh | grep PROJECT_URL)" && \
	mkdir -p /var/www/html && \
	mv ./documentation/html /var/www/html/$PROJECT_URL
	#mkdir -p /var/www/html/$PROJECT_URL && \
	#cp -r ./documentation/html/* /var/www/html/$PROJECT_URL

# keep this reminder here, in case for some reason the base image chooses a different entrypoint
#ENTRYPOINT ["/docker-entrypoint.sh"]
#CMD	["nginx", "-g", "daemon off;"]

